role_module.main.sdc.apply_config_to_sdc(
    {
        "brake_activation_delay": 250,
        "command_priorities": ["0", "1", "2", "4"],
        "lock_status": 0,
        "mixed_mode": 0,
        "overvoltage_cutoff_threhold": 30.0,
        "pwm_frequency": 160,
        "script_auto_start": 0,
        "serial_data_watchdog": 1000,
        "serial_echo": 0,
        "short_circuit_detection_threshold": 1,
        "undervoltage_limit": 1,
        "motor_1": {
            "closed_loop_error_detection": 0,
            "current_limit": 20.0,
            "current_limit_action": 0,
            "current_limit_amps": 75.0,
            "current_limit_min_period": 500,
            "default_velocity_in_position_mode": 50,
            "encoder_high_count_limit": 42000,
            "encoder_high_limit_action": 0,
            "encoder_low_count_limit": -42000,
            "encoder_low_limit_action": 0,
            "encoder_ppr_value": 51,
            "encoder_usage": 2,
            "max_power_forward": 100,
            "max_power_reverse": 100,
            "max_rpm": 1000,
            "motor_acceleration_rate": 10000,
            "motor_deceleration_rate": 10000,
            "operating_mode": 1,
            "pid_differential_gain": 0.0,
            "pid_integral_cap": 100,
            "pid_integral_gain": 0.2,
            "pid_proportional_gain": 1.0,
            "sensor_type_select": [0, 18],
            "stall_detection": 0,
        },
        "motor_2": {
            "closed_loop_error_detection": 0,
            "current_limit": 20.0,
            "current_limit_action": 0,
            "current_limit_amps": 75.0,
            "current_limit_min_period": 500,
            "default_velocity_in_position_mode": 50,
            "encoder_high_count_limit": 42000,
            "encoder_high_limit_action": 0,
            "encoder_low_count_limit": -42000,
            "encoder_low_limit_action": 0,
            "encoder_ppr_value": 51,
            "encoder_usage": 2,
            "max_power_forward": 100,
            "max_power_reverse": 100,
            "max_rpm": 1000,
            "motor_acceleration_rate": 10000,
            "motor_deceleration_rate": 10000,
            "operating_mode": 1,
            "pid_differential_gain": 0.0,
            "pid_integral_cap": 100,
            "pid_integral_gain": 0.2,
            "pid_proportional_gain": 1.0,
            "sensor_type_select": [0, 18],
            "stall_detection": 18,
        },
    }
)


from thirtybirds3.adapters.actuators.roboteq import sdc

sdc.sdc.get_firmware_version()

sdc.sdc.set_serial_echo(0)

sdc.sdc.read_config_from_sdc()


sdc.sdc.motor_2.set_sensor_type_select(18)
role_module.main.sdc.save_configuration_in_eeprom()

sdc.sdc.motor_1.go_to_speed_or_relative_position(60)
sdc.sdc.motor_2.go_to_speed_or_relative_position(60)


sdc.sdc.motor_1.go_to_speed_or_relative_position(100)
sdc.sdc.motor_2.go_to_speed_or_relative_position(100)

sdc.sdc.motor_1.go_to_speed_or_relative_position(0)
sdc.sdc.motor_2.go_to_speed_or_relative_position(0)


from thirtybirds3.adapters.actuators.roboteq import sdc
sdc.sdc.apply_config_to_sdc(
    {
        "motor_1": {
            "encoder_ppr_value": 51,
        },
        "motor_2": {
            "encoder_ppr_value": 51,
        },
    }
)
sdc.sdc.save_configuration_in_eeprom()



=========================================================

top grid:
hostname / online_status
local_ip

exceptions
status
messages (from controller)

system_cpu
memory_free
system_disk
core_temp

system_uptime
wifi_strength
core_voltage

tb_git_timestamp
tb_scripts_version
app_git_timestamp
app_scripts_version
os_version

text box: 
can show exceptions, status, messages

=========================================================

hostname / connected_status

emergency_stop_button / emergency_stop(detected)
overheat / temperature
overvoltage / undervoltage
short_circuit

motor_1
    operating_mode AAAAAAAAAAAAA
    current_command AAAA N NN
    closed_loop_error [----------]
    volts / duty_cycle [----------]
    encoder_speed_relative [----------]

    loop_error_detected @
    amps_limit_activated @
    motor_stalled @
    safety_stop_active @
    forward_limit_triggered @
    reverse_limit_triggered @
    amps_trigger_activated @
    MOSFET_failure @
    default_configuration_loaded_at_startup @

    encoder_ppr_value ####
    pid_differential_gain ##
    pid_integral_gain ##
    pid_proportional_gain ##

motor_2
    operating_mode AAAAAAAAAAAAA
    current_command AAAA N NN
    closed_loop_error [----------]
    volts / duty_cycle [----------]
    encoder_speed_relative [----------]

    loop_error_detected @
    amps_limit_activated @
    motor_stalled @
    safety_stop_active @
    forward_limit_triggered @
    reverse_limit_triggered @
    amps_trigger_activated @
    MOSFET_failure @
    default_configuration_loaded_at_startup @

    encoder_ppr_value ####
    pid_differential_gain ##
    pid_integral_gain ##
    pid_proportional_gain ##

firmware_version


role_module.main.sdc.motor_1.set_acceleration(5000)
role_module.main.sdc.motor_2.set_acceleration(5000)
role_module.main.sdc.motor_1.set_deceleration(5000)
role_module.main.sdc.motor_2.set_deceleration(5000)
role_module.main.sdc.save_configuration_in_eeprom()

role_module.main.sdc.



role_module.main.sdc.motor_1.set_motor_deceleration_rate(10000)
role_module.main.sdc.motor_2.set_motor_deceleration_rate(10000)
role_module.main.sdc.motor_2.set_motor_acceleration_rate(10000)
role_module.main.sdc.motor_1.set_motor_acceleration_rate(10000)
role_module.main.sdc.save_configuration_in_eeprom()


role_module.main.sdc.motor_1.set_motor_deceleration_rate(10000)
role_module.main.sdc.motor_2.set_motor_deceleration_rate(10000)
role_module.main.sdc.motor_2.set_motor_acceleration_rate(10000)
role_module.main.sdc.motor_1.set_motor_acceleration_rate(10000)
role_module.main.sdc.motor_1.set_pid_differential_gain(0)
role_module.main.sdc.motor_1.set_pid_integral_gain(0.3)
role_module.main.sdc.motor_1.set_pid_proportional_gain(1)
role_module.main.sdc.motor_2.set_pid_differential_gain(0)
role_module.main.sdc.motor_2.set_pid_integral_gain(0.2)
role_module.main.sdc.motor_2.set_pid_proportional_gain(1)
role_module.main.sdc.save_configuration_in_eeprom()






role_module.main.sdc.motor_1.set_pid_integral_gain(0.3)
role_module.main.sdc.motor_2.set_pid_integral_gain(0.3)
role_module.main.sdc.save_configuration_in_eeprom()
